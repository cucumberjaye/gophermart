// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cucumberjaye/gophermart/internal/app/handler (interfaces: MartService)

// Package mock_handler is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/cucumberjaye/gophermart/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockMartService is a mock of MartService interface.
type MockMartService struct {
	ctrl     *gomock.Controller
	recorder *MockMartServiceMockRecorder
}

// MockMartServiceMockRecorder is the mock recorder for MockMartService.
type MockMartServiceMockRecorder struct {
	mock *MockMartService
}

// NewMockMartService creates a new mock instance.
func NewMockMartService(ctrl *gomock.Controller) *MockMartService {
	mock := &MockMartService{ctrl: ctrl}
	mock.recorder = &MockMartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMartService) EXPECT() *MockMartServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockMartService) CreateUser(arg0 models.RegisterUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMartServiceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMartService)(nil).CreateUser), arg0)
}

// GenerateToken mocks base method.
func (m *MockMartService) GenerateToken(arg0 models.LoginUser) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockMartServiceMockRecorder) GenerateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockMartService)(nil).GenerateToken), arg0)
}

// GetBalance mocks base method.
func (m *MockMartService) GetBalance(arg0 string) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockMartServiceMockRecorder) GetBalance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockMartService)(nil).GetBalance), arg0)
}

// GetOrders mocks base method.
func (m *MockMartService) GetOrders(arg0 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockMartServiceMockRecorder) GetOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockMartService)(nil).GetOrders), arg0)
}

// GetWithdrawals mocks base method.
func (m *MockMartService) GetWithdrawals(arg0 string) ([]models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0)
	ret0, _ := ret[0].([]models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockMartServiceMockRecorder) GetWithdrawals(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockMartService)(nil).GetWithdrawals), arg0)
}

// SetOrder mocks base method.
func (m *MockMartService) SetOrder(arg0 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOrder", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOrder indicates an expected call of SetOrder.
func (mr *MockMartServiceMockRecorder) SetOrder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOrder", reflect.TypeOf((*MockMartService)(nil).SetOrder), arg0)
}

// Withdraw mocks base method.
func (m *MockMartService) Withdraw(arg0 string, arg1 models.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockMartServiceMockRecorder) Withdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockMartService)(nil).Withdraw), arg0, arg1)
}
